<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Lin的小世界</title>
    <subtitle type="html">这是一个菜鸟的后花园！噜啦啦拉拉！</subtitle>
    <updated>2020-04-30T16:00:27-07:00</updated>
    <id>https://lo-ol.xyz/</id>
    <link rel="alternate" type="text/html" href="https://lo-ol.xyz/" />
    <link rel="self" type="application/atom+xml" href="https://lo-ol.xyz/atom.xml" />
    <author>
            <name>Lin</name>
            <uri>https://lo-ol.xyz/</uri>
            
                <email>ljb9962@gmail.com</email>
            </author>
    <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights>
    <generator uri="https://gohugo.io/" version="0.66.0">Hugo</generator>
        <entry>
            <title type="text">Java多线程的基本原理</title>
            <link rel="alternate" type="text/html" href="https://lo-ol.xyz/posts/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/" />
            <id>https://lo-ol.xyz/posts/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</id>
            <updated>2020-04-30T16:00:12-07:00</updated>
            <published>2020-04-30T14:51:49-07:00</published>
            <author>
                    <name>Lin</name>
                    <uri>https://lo-ol.xyz/</uri>
                    <email>ljb9962@gmail.com</email>
                    </author>
            <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights>
    
    <summary type="html"><![CDATA[基本概念 程序：是计算机指令的集合，它以文件的形式存储在磁盘上,即程序是静态的代码 进程……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1>
<ul>
<li>程序：是计算机指令的集合，它以文件的形式存储在磁盘上,即程序是静态的代码</li>
<li>进程：是一个程序在其自身的地址空间中的一次执行活动,是系统运行程序的基本单位进程是资源申请、调度和独立运行的单位</li>
<li>线程：是进程中的一个单一的连续控制流程。一个进程可以拥有多个线程,分别执行不同的任务,多个线程共享内存，从而极大地提高了程序的运行效率;</li>
</ul>
<p>多线程的出现是为了加快处理任务的效率，在操作系统层面上，线程是操作系统任务调度的最小单位，进程是资源分配的最小单位，一个进程可以包含多个线程，线程共享进程中的资源。同一进程中的线程极有可能会相互影响。</p>
<h1 id="为什么要用多线程">为什么要用多线程</h1>
<p>程序的某个功能部分正在等待某些资源的时候，此时又不愿意因为等待而造成程序暂停，那么就可以创建另外的线程进行其它的工作；多线程可以最大限度地减低CPU的闲置时间，从而提高CPU的利用率。</p>
<h1 id="创建线程有两张方式">创建线程有两张方式</h1>
<ol>
<li>继承Thread类</li>
<li>实现Runnable接口，但是Runnable接口中没有start()方法，所以还需要new一个新的Thread线程来启动实现Runnable的子类。</li>
</ol>
<h1 id="线程安全">线程安全</h1>
<p>当多个线程访问某个一类(对象或方法)时，这个类始终都能表现出正确的行为，那么这个类(对象或方法)就是线程安全的(即在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成)。</p>
<h1 id="如何解决线程安全问题">如何解决线程安全问题？</h1>
<h2 id="可以通过加锁的方式">可以通过加锁的方式：</h2>
<p>同步(synchronized)代码块：只需要将操作共享数据的代码放在synchronized
同步(synchronized)方法：将操作共享数据的代码抽取出来放到一个synchronized方法里面就可以了
Lock锁：加同步锁 lock() 以及释放同步锁unlock()</p>
<h1 id="死锁">死锁</h1>
<ul>
<li>死锁：是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</li>
</ul>
<h2 id="产生死锁的必要条件">产生死锁的必要条件：</h2>
<p>互斥条件：所谓互斥就是进程在某一时间内独占资源。
请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
不剥夺条件：进程已获得资源，在末使用完之前，不能强行剥夺。
循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</p>
<h2 id="死锁的解决方法">死锁的解决方法：</h2>
<p>撤消陷于死锁的全部进程。
逐个撤消陷于死锁的进程，直到死锁不存在。
从陷于死锁的进程中逐个强迫放弃所占用的资源，直至死锁消失。 从另外一些进程那里强行剥夺足够数量的资源分配给死锁进程，以解除死锁状态。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">集合容器的粗理解</title>
            <link rel="alternate" type="text/html" href="https://lo-ol.xyz/posts/%E9%9B%86%E5%90%88%E5%AE%B9%E5%99%A8%E7%9A%84%E7%B2%97%E7%90%86%E8%A7%A3/" />
            <id>https://lo-ol.xyz/posts/%E9%9B%86%E5%90%88%E5%AE%B9%E5%99%A8%E7%9A%84%E7%B2%97%E7%90%86%E8%A7%A3/</id>
            <updated>2020-03-12T18:11:04-07:00</updated>
            <published>2020-03-11T19:18:33-07:00</published>
            <author>
                    <name>Lin</name>
                    <uri>https://lo-ol.xyz/</uri>
                    <email>ljb9962@gmail.com</email>
                    </author>
            <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights>
    
    <summary type="html"><![CDATA[我在大约两周前初步地学习了集合容器，我不确定还记得多少，希望能通过写blog的方式来……]]></summary>
            
                <content type="html"><![CDATA[<p>我在大约两周前初步地学习了集合容器，我不确定还记得多少，希望能通过写blog的方式来巩固一下。</p>
<h1 id="集合容器简述">集合容器简述</h1>
<p>集合容器是用来储存数据的。</p>
<p><img src="/static/images/Collection%20&amp;%20Map%20%E5%8F%82%E8%80%83%E5%9B%BE.jpg" alt="Collection & Map 参考图" title="Collection &amp; Map 参考图">
Java容器分为<code>Collection</code>和<code>Map</code>两大类，<code>Collection</code>集合的子接口主要有<code>Set</code>，<code>List</code>和<code>Queue</code>，而<code>Map</code>接口不是<code>Collection</code>的子接口。</p>
<h2 id="集合与数组的区别">集合与数组的区别</h2>
<ul>
<li>数组的长度是固定的，而集合的长度是可变的。</li>
<li>数组既可以储存基本数据类型，也可以储存引用数据类型。集合只能用来储存引用数据类型。</li>
<li>数组中储存点元素类型是单一的，而集合储存的对象可以是不同的。</li>
</ul>
<h1 id="collection体系"><code>Collection</code>体系</h1>
<p><code>Collection</code>接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了几个个接口，像是<code>Set</code>和<code>List</code>。</p>
<p><code>List</code>：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。</p>
<p><code>Set</code>：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet（不孝子，唯一且有序） 以及 TreeSet。</p>
<h2 id="list常用子接口"><code>List</code>常用子接口</h2>
<ol>
<li>
<p><code>ArrayList</code>(Object数组)</p>
<ul>
<li>可以指定初始容量且扩容是需要复制</li>
<li>非线性安全</li>
<li>寻址困难，插入和删除容易</li>
</ul>
</li>
<li>
<p><code>LinkedList</code>(双向循环链表)</p>
<ul>
<li>不可以指定初始容量且扩容是不需要复制</li>
<li>非线性安全</li>
<li>寻址容易，插入和删除困难（与<code>ArrayList</code>相反）</li>
</ul>
</li>
<li>
<p><del><code>Vector</code></del>(Object数组)(<code>ArrayList</code>的前生)</p>
<ul>
<li>可以指定初始容量且扩容是需要复制</li>
<li>线性安全</li>
</ul>
</li>
</ol>
<h2 id="set常用子接口"><code>Set</code>常用子接口</h2>
<ol>
<li>
<p><code>HashSet</code>(最常⽤，最⾼效的Set实现)</p>
<ul>
<li>存入和取出顺序有可能不一致</li>
<li>内部无重复元素</li>
<li>基于<code>HashMap</code>实现的，底层采用<code>HashMap</code>来保存元素</li>
<li><code>HashSet</code>的实现是不同步的</li>
</ul>
</li>
<li>
<p><code>LinkedHashSet</code></p>
<ul>
<li>存入和取出顺序一致</li>
<li>内部无重复元素</li>
<li><code>LinkedHashSet</code>继承与<code>HashSet</code>，并且其内部是通过<code>LinkedHashMap</code>来实现的</li>
</ul>
</li>
<li>
<p><code>TreeSet</code></p>
<ul>
<li>存入和取出顺序有可能不一致</li>
<li>会自动按照升序排序</li>
<li><code>TreeSet</code>是基于红黑树实现的，该接口由<code>TreeMap</code>实例支持，能提高查找的效率</li>
</ul>
</li>
</ol>
<h2 id="collections具法集合">Collections⼯具⽅法集合</h2>
<ul>
<li>emptySet(): 等返回⼀个⽅便的空集合</li>
<li>synchronizedCollection: 将⼀个集合变成线程安全的</li>
<li>unmodifiableCollection: 将⼀个集合变成不可变的（也可以使⽤Guava的Immutable）</li>
</ul>
<h1 id="map体系"><code>Map</code>体系</h1>
<p><code>Map</code>是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 不要求有序，允许重复。<code>Map</code>没有继承于<code>Collection</code>接口，从<code>Map</code>集合中检索元素时，只要给出键对象，就会返回对应的值对象。</p>
<h2 id="map的常用实现类主要有">Map的常用实现类主要有：</h2>
<ol>
<li>
<p><code>HashMap</code></p>
<ul>
<li><code>HashMap</code>基于<code>Hash</code>算法实现的。
<img src="/static/images/HashMap%E4%BE%8B%E5%AD%90.jpg" alt="HashMap例子" title="图片出处见水印">
<strong>HashMap是非同步的，并且允许null，即null value和null key。</strong></li>
</ul>
</li>
<li>
<p><code>TreeMap</code></p>
<ul>
<li>和<code>TreeSet</code>类似</li>
</ul>
</li>
</ol>
<p>写了这么多其实感觉基础还是不太扎实，还是需要大量的题目去练习。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Java的包管理与Maven初步</title>
            <link rel="alternate" type="text/html" href="https://lo-ol.xyz/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven%E5%88%9D%E6%AD%A5/" />
            <id>https://lo-ol.xyz/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven%E5%88%9D%E6%AD%A5/</id>
            <updated>2020-03-10T21:14:23-07:00</updated>
            <published>2020-03-10T16:37:38-07:00</published>
            <author>
                    <name>Lin</name>
                    <uri>https://lo-ol.xyz/</uri>
                    <email>ljb9962@gmail.com</email>
                    </author>
            <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights>
    
    <summary type="html"><![CDATA[什么是包(package) 和 类路径 维基百科中是这样介绍的，A Java package organizes Java classes into namespaces, providing a unique namespace for……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="什么是包package-和-类路径">什么是包(package) 和 类路径</h1>
<p><a href="https://en.wikipedia.org/wiki/Java_package">维基百科</a>中是这样介绍的，A Java package organizes Java classes into namespaces, providing a unique namespace for each type it contains. Classes in the same package can access each other's package-private and protected members. 我个人的理解就是Java将许一组类打包到一个单一的名称空间中，利用包实现对一个程序的拆封。</p>
<p>当然这里说的包管理的包是指 JAR 包。JAR 是一种压缩格式，可将多个 Java applet 及其所需组件（.class 文件、图像和声音）绑定到 JAR 文件中，即一堆字节码文件的集合。</p>
<p>类路径(classpath)相当于是<code>JVM</code>的指南针(？)，帮助<code>JVM</code>寻找类的字节码。</p>
<h1 id="什么是包管理">什么是包管理</h1>
<p>这里是要稍微提一下<code>JVM</code>的使命了，简述来说可能就是按照类的全限定类名，加载、执行类的字节码。<code>JVM</code>通过ClassPath去指定的目录中查找相应字节码文件并运行。在这个过程中，<code>JVM</code>不会管你什么字节码是用来干什么的啊，或是这么运行符不符合当地法律啊，这些一律不care。只要你给<code>JVM</code>提供了ClassPath并且目标正确即可。</p>
<p>这就会引出一个问题，如果你引用的是第三方库，<code>JVM</code>该如何方便的找到这些相应的字节码文件？这个时候包的重要性就体现出来了。从相应的网站下载所需要的JAR包然后将其导入CLasspath中让<code>JVM</code>运行。</p>
<p>这个过程可能说起来很简单，但是运行在一个JAR包时，可能还需要另外一个JAR包中的一个字节码文件作为支撑。</p>
<p>**这就产生了包的依赖。**这种依赖代表着一个包在缺少它所依赖的另一个包时，<code>JVM</code>是无法运行的。同时，打个比方，A包依赖了B包，而B包这需要引用C包中的某个类，<strong>这就产生了传递性依赖。</strong></p>
<h1 id="传递性依赖带来的问题">传递性依赖带来的问题</h1>
<p>传递性依赖这一现象使得我们需要将所有的JAR包添入到CLasspath中，这个过程可以说简单，也可以说是复杂。简单是因为你只需要下载下来相应的JAR包并且放到正确的位置即可，复杂则是因为你永远不知道他需要多少JAR包 ——— 每个JAR包背后站着多少个JAR包。</p>
<p>在Maven这一划时代的包管理出现前，程序猿大多是要手动写命令进行编译运行并且导入相应的包。直到Apache Ant的出现这种现象变得稍微简便了些，但还是要手动下载每个第三方类库，写 XML 配置，指定编译的源码目录、依赖的 jar 包和输出目录等。</p>
<p>Maven的出现打破了这一问题，当然包管理不只是Maven的全部。我们只需要将所需要的JAR包输入到<code>pom.xml</code>中即可，Maven会自动下载相应的依赖的包。所以我们不需要在自己管理Classpath了。他会在自己“阅读”完 jar 包后，前往本地或是线上仓库中下载相应的依赖包。</p>
<h1 id="包冲突">包冲突</h1>
<p>当然，上述所描述的只是最理想的状态。Maven中有一个原则：<strong>绝对不允许最终的 classpath 出现同名不同版本的 jar 包。</strong></p>
<p>Maven 解析 pom.xml 文件时，同一个 jar 包只会保留一个，那么面对多个版本的jar包，需要怎么解决呢？</p>
<ol>
<li>
<p>Maven默认处理策略</p>
<ul>
<li>最短路径优先
Maven 面对同一个包的不同版本时，会默认选择最短路径的那个 jar 包，即 <code>A-&gt;B-&gt;D1</code> 和 <code>E-&gt;D2</code> 中D2会被保留。</li>
<li>最先声明优先
如果路径一样的话，如： <code>A-&gt;B-&gt;C1</code>, <code>E-&gt;F-&gt;C2</code> ，两个依赖路径长度都是 2，那么就选择最先声明。</li>
</ul>
</li>
<li>
<p>移除某项依赖的依赖jar包
手动在pom.xml中使用<code>&lt;exclusion&gt;</code>标签去排除冲突的jar包</p>
</li>
</ol>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
        &lt;version&gt;1.4.4.RELEASE&lt;/version&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
                &lt;artifactId&gt;guava&lt;/artifactId&gt;
            &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
</code></pre><p>当然运用 <code>Maven helper</code> 插件中的 <code>Dependency Analyzer</code> 也是可以的。</p>
<h1 id="maven-依赖中的-scope">Maven 依赖中的 scope</h1>
<p>scope 用于在不同代码目录中隔离第三方依赖，选项有compile/test/provided等：</p>
<ul>
<li>Maven 默认的依赖配置项中，scope 的默认值是compile（可以省略不写），会参与当前项目的编译，当然也包括测试，打包时候通常也需要包含进去，在main和test中都可见；</li>
<li>test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，典型的如junit，只在test层级中可见；</li>
<li>provided表示只参与编译，不参与运行，使用 IDEA 尝试运行就能看到报错</li>
</ul>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">用Hugo搭建个人博客</title>
            <link rel="alternate" type="text/html" href="https://lo-ol.xyz/posts/%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" />
            <id>https://lo-ol.xyz/posts/%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
            <updated>2020-03-10T21:14:23-07:00</updated>
            <published>2020-03-08T13:45:21-07:00</published>
            <author>
                    <name>Lin</name>
                    <uri>https://lo-ol.xyz/</uri>
                    <email>ljb9962@gmail.com</email>
                    </author>
            <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights>
    
    <summary type="html"><![CDATA[什么是hugo &amp; 为什么要用hugo Hugo是一个用Go语言编写的静态网站生成器。静态……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="什么是hugo--为什么要用hugo">什么是hugo &amp; 为什么要用hugo</h1>
<p>Hugo是一个用<code>Go</code>语言编写的静态网站生成器。静态站点的好处就是快速、安全、易于部署，最主要是可以通过版本控制来进行管理。</p>
<h1 id="如何用hugo搭建个人博客">如何用Hugo搭建个人博客</h1>
<h2 id="下载和安装hugo">下载和安装Hugo</h2>
<ul>
<li>
<p>MacOS 用户
首先安装 <a href="https://brew.sh/">Homebrew</a> 然后在终端中运行
<code>brew install hugo</code>
<code>hugo version</code></p>
</li>
<li>
<p>Windows 用户
前往 <a href="https://github.com/gohugoio/hugo/releases">github的hugo/releases</a> 下载适合自己系统版本的zip打包文件，然后解压到自己本地的博客目录，比如<code>D:\Hugo</code> 得到文件<code>D:\Hugo\hugo.exe</code>
将<code>D:\Hugo</code>加入到系统环境变量中，打开终端并运行<code>hugo version</code></p>
</li>
</ul>
<h2 id="生成个人站点">生成个人站点</h2>
<p>在D盘下创建blog文件夹作为存放个人站点文件的主目录，在终端中运行：</p>
<pre><code>cd D:\blog\
hugo new site 352503538.github.io-creator
</code></pre><p>之后在blog目录下会生成一个<em>352503538.github.io-creator</em>文件夹，其中archetypes目录里可以放一些原型，用于hugo新建内容的配置属性。config.toml是网站的配置属性文件。content文件夹里放你网站的内容，例如你发布的博客文章。data目录是Hugo使用的配置文件存放的地方。layout目录存放布局内容。static目录存放静态资源如图片、css等。</p>
<p>接下来我们可以准备编写第一篇文章了。命令如下：</p>
<pre><code>cd 352503538.github.io-creator
hugo new post/my-first-blog.md
</code></pre><p>Hugo会在content目录下创建post目录，在post目录下创建<code>my-first-blog.md</code>文件。之后打开md文件，里面已经有些内容</p>
<pre><code>---
title: &quot;My First Blog&quot;
date: 2020-03-05T19:14:50-08:00
draft: false
---
</code></pre><p>其中<code>---</code>中间的内容是TOML配置信息，其下方可以编写个人的博客内容，如果想要发布将<code>draft: true</code>改为<code>draft: false</code>即可。</p>
<p>如果觉得个人博客的主题太过单调，可以在<a href="https://themes.gohugo.io/">Hugo theme</a>中添加自己喜欢的主题装饰一下。</p>
<p>我的主题是<a href="https://github.com/reuixiy/hugo-theme-meme/blob/master/README.zh-cn.md">MemE</a>，这是由一个中国人编写的，简约且优雅，教程也比较清晰，喜欢的话可以自行添加。</p>
<h2 id="本地测试">本地测试</h2>
<p>在终端中运行：</p>
<pre><code>hugo server -D
</code></pre><p>在终端中点击 <code>http://localhost:1313/</code> 就能查看个人博客了（不过只能在本地中查看）。</p>
<h2 id="上传到github">上传到Github</h2>
<p>首先在<em>352503538.github.io-creator</em>文件夹中新建 <em>.gitignore</em> 文件，然后在其中输入<code>/public/</code>。</p>
<p>然后在终端中运行：</p>
<pre><code>hugo server
</code></pre><p>Hugo将编译所有文件并输出到<code>public</code>目录，你需要在github上创建repository，名字就是username.github.io，创建完后在终端中运行：</p>
<pre><code>cd public
git init
git add .
git commit -m &quot;第一次部署&quot;
git remote add origin git@github.com:352503538/352503538.github.io.git
git push -u origin master
</code></pre><p>稍等片刻后，打开username.github.io网址，就可以看到自己的个人网站了。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">My First Blog</title>
            <link rel="alternate" type="text/html" href="https://lo-ol.xyz/posts/my-first-blog/" />
            <id>https://lo-ol.xyz/posts/my-first-blog/</id>
            <updated>2020-03-10T21:14:23-07:00</updated>
            <published>2020-03-05T19:14:50-08:00</published>
            <author>
                    <name>Lin</name>
                    <uri>https://lo-ol.xyz/</uri>
                    <email>ljb9962@gmail.com</email>
                    </author>
            <rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><summary type="html"><![CDATA[大家好 这是我的第一个博客，希望这是一个好的开始。]]></summary>
            
                <content type="html"><![CDATA[<h1 id="大家好">大家好</h1>
<p>这是我的第一个博客，希望这是一个好的开始。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
